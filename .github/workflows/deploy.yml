name: Deploy

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Podman
        run: |
          sudo apt-get update
          sudo apt-get install -y podman

      - name: Log in to GHCR
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push image
        run: |
          IMAGE_TAG="ghcr.io/${{ github.repository }}:${{ github.sha }}"
          LATEST_TAG="ghcr.io/${{ github.repository }}:latest"

          echo "Building image: ${IMAGE_TAG}"
          podman build -t ${IMAGE_TAG} -t ${LATEST_TAG} .

          echo "Pushing image: ${IMAGE_TAG}"
          podman push ${IMAGE_TAG}

          echo "Pushing image: ${LATEST_TAG}"
          podman push ${LATEST_TAG}

      - name: Setup SSH key
        env:
          VM_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${VM_SSH_KEY}" | tr -d '\r' > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          # Basic key validation
          ssh-keygen -y -f ~/.ssh/ec2_key > /dev/null || (echo "Invalid private key format provided in EC2_SSH_KEY secret" && exit 1)

      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.EC2_HOST }}
          VM_USER: ${{ secrets.EC2_USER }}
          ENV_FILE_CONTENTS: ${{ secrets.ENV_FILE_CONTENTS }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          IMAGE_NAME: "ghcr.io/${{ github.repository }}:latest"
          CONTAINER_NAME: "peeple"
        run: |
          echo "Connecting to ${VM_USER}@${VM_HOST}..."
          # Use a Heredoc (<<EOF) to send multiple commands over SSH
          ssh -i ~/.ssh/ec2_key -o StrictHostKeyChecking=no -o ConnectTimeout=10 ${VM_USER}@${VM_HOST} /bin/bash <<EOF
            set -e

            echo "--> Setting up environment on VM..."
            mkdir -p ~/.config/${CONTAINER_NAME}
            mkdir -p ~/.config/systemd/user

            echo "${ENV_FILE_CONTENTS}" > ~/.config/${CONTAINER_NAME}/.env
            ENV_FILE_PATH="~/.config/${CONTAINER_NAME}/.env"

            echo "--> Logging into GHCR on VM..."
            echo "${GHCR_TOKEN}" | podman login ghcr.io -u ${{ github.actor }} --password-stdin

            echo "--> Pulling latest image: ${IMAGE_NAME}"
            podman pull ${IMAGE_NAME}

            SERVICE_NAME="${CONTAINER_NAME}.service"
            SYSTEMD_UNIT_PATH="~/.config/systemd/user/${SERVICE_NAME}"

            echo "--> Stopping and removing existing container (if any)..."
            if systemctl --user is-active --quiet ${SERVICE_NAME}; then
              echo "Stopping running systemd service: ${SERVICE_NAME}"
              systemctl --user stop ${SERVICE_NAME}
            else
              echo "Systemd service ${SERVICE_NAME} not active, attempting podman stop..."
              podman stop ${CONTAINER_NAME} || true
            fi

            podman rm ${CONTAINER_NAME} || true

            echo "--> Creating new container definition: ${CONTAINER_NAME}"
            podman create \
              -p 8080:8080 \
              --env-file \${ENV_FILE_PATH} \
              --name ${CONTAINER_NAME} \
              ${IMAGE_NAME}

            if [ \$? -ne 0 ]; then
                echo "ERROR: Failed to create container ${CONTAINER_NAME}"
                exit 1
            fi

            echo "--> Generating systemd unit file: ${SYSTEMD_UNIT_PATH}"
            podman generate systemd --new --files --name ${CONTAINER_NAME} --output ~/.config/systemd/user
            if [ ! -f "\${SYSTEMD_UNIT_PATH}" ]; then
                 echo "ERROR: Failed to generate systemd unit file at \${SYSTEMD_UNIT_PATH}"
                 echo "Attempting fallback generation..."
                 podman generate systemd --new --name ${CONTAINER_NAME} > "\${SYSTEMD_UNIT_PATH}"
                 if [ \$? -ne 0 ] || [ ! -f "\${SYSTEMD_UNIT_PATH}" ]; then
                   echo "ERROR: Fallback generation also failed."
                   exit 1
                 fi
            fi

            echo "--> Reloading systemd user daemon..."
            systemctl --user daemon-reload

            echo "--> Enabling and starting systemd service: ${SERVICE_NAME}"
            systemctl --user enable --now ${SERVICE_NAME}

            echo "--> Checking service status:"
            systemctl --user status ${SERVICE_NAME} --no-pager

            echo "--> Cleaning up GHCR login token..."
            podman logout ghcr.io || true

            echo "--> Deployment successful!"
          EOF

          if [ $? -ne 0 ]; then
            echo "Deployment script failed on remote host."
            exit 1
          fi
